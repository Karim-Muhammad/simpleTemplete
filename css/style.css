body {
    background-color: antiquewhite;
}
div.p {
    caret-color:aqua;
    /**/
    /* display: grid; */
    /* align-items: center; horizontally */
    /* place-items:center;  horizontally & vertically */
    /**/
    margin: auto;
    width: 900px;
    height: 700px;
    background: red;
    color: aliceblue;
}
div.son {
    background-color: rgba(131, 143, 143, 0.504);
    width: 60%;
    height: 200px;
    margin: auto;
}

div.tst {
    margin: 100px auto;
    background-color: aquamarine;
    width: 700px;
    height: 200px;
    padding: 20px;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: flex-start ;
    position: relative;
}
div.tst:before {
    content: "";
    width: 100%;
    height: 10px;
    position: absolute;
    top: -10px;
    left: 0;
    background-image:linear-gradient(
        to right,
        red 20%,
        blue 20%,
        blue 40%,
        green 40%,
        green 60%,
        white 60%
        ) ;
        /*
            blue begin from 20% and end 40%
            we use gradient to make border like this, Awesome!
        */
}
div.tst div {
    text-align: center;
    color: wheat;
    width: calc(95%/3);
    background-color: rgb(78, 76, 74);
}














.holy-grail {
    height: 700px;
    background-color: azure;
    display: flex;
    flex-wrap: wrap;
    align-items: stretch;
    /* align-content: flex-start; */
}
.holy-grail .header {
    align-self: flex-start;
    padding: 10px;
    text-align: center;
    flex-basis: 100%;
    background-color: aquamarine;
}
.holy-grail .nav {
    align-self: flex-start;
    /* align-content: flex-start; */
    flex-basis: 100%;
    background-color: aqua;
    text-align: right;
}
.holy-grail .aside, .holy-grail .ads {
    background-color: blueviolet;
    padding: 10px;
}
.holy-grail .main {
    padding: 10px;
    flex-grow: 1;
    background-color: antiquewhite;
}
.holy-grail .footer {
    flex-basis: 100%;
    background-color: black;
    color: aliceblue;
    text-align: center;
    font-family: monospace;
    padding: 10px;
    align-self: flex-end;
}

/*  ->How to design holy grail design
    Source [https://www.bing.com/search?q=how+to+holy-grail+design&cvid=0b8f246d7b4a4361b870800fd434d736&aqs=edge..69i57j0.9467j0j1&pglt=2083&FORM=ANNTA1&PC=U531]
*/



.grid {
    width: 800px;
    /* height: 700px; */
    margin: 100px auto;
    background-color: aliceblue;
    display: grid;
    grid-template-columns: auto 1fr; /* auto 1fr */
    /*
        when you use fr and auto separitaly, you maybe confuse cus they works the same
        but actually when you together you find out auto make the elements fit hits content and no take most area for him
        UNLIKE fr, fr try take most area for its element

        1fr -> greedy
        auto -> shy (when he is found with fr, he is limited width according its content)
        when you for example remove some text in content, if you want still width as before so use fr
        while if you want if content decrease you need the width as well decrease so you need to use auto
    */

    grid-template-rows: 20% 20% 20%;
    /* grid-template-columns: auto auto; */

    /*
        You can make difference between 1fr , auto when using:
            1- justify-content
            2- align-items
            3- align-content
            becuase if you use 1fr you won't see any result for these propeties
            while if you used auto, you see the result of these properites
            becuase the elements will take the fit-content according its content
    
    */
}
.grid div{
    padding: 10px;
    text-align: center;
    color: aliceblue;
    /* margin-top: 20px; */
    background-color: red;
}



.grid-holy-grail {
    background-color: aliceblue;
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    grid-template-rows: auto auto calc(100vh - calc(38.4px*2)) ;
    gap: 7px;
}
.grid-holy-grail .header {
    grid-column: 1 / 13;
    text-align: center;
    padding: 10px;
    background-color: blueviolet;
}
.grid-holy-grail .nav {
    grid-column: 1 / 13;
    text-align: center;
    padding: 10px;
    background-color: rgb(112, 85, 136);
}
.grid-holy-grail .aside {
    grid-column: 1 / 2;
    text-align: center;
    padding: 10px;
    background-color: rgb(181, 135, 224);
}
.grid-holy-grail .main {
    grid-column: 2 / 12;
    text-align: center;
    padding: 10px;
    background-color: rgb(113, 97, 128);
}
.grid-holy-grail .ads {
    grid-column: 12 / 13;
    text-align: center;
    padding: 10px;
    background-color: rgb(93, 0, 180);
}
.grid-holy-grail .footer {
    grid-column: 1 / 13;
    color: aliceblue;
    text-align: center;
    padding: 10px;
    background-color: rgb(20, 15, 25);
}

/*
    * there is new way to do column-start , column-end it is
        span <number of columns> [start with 1 by default]
        new syntax -> <start> / span <number of columns>

    ? What is difference between this way , and the another?
        - the difference is if you used this way <start> / <end> you may extend the layout if you put the <end> is large if you do this
            grid-template-columns: repeat(12, auto) and you put the <end> 15 the layout will be 14 columns no 12
        -While if you used way of [span] if you enter end is large of the limited columns like 15 will be go down nad take the 15 columns
        if you did that the the element will take the limited columns only mean will take 12 columns no 15
        and you have option too, you can choose 13 (12+1) but this will the rest elements may not match
*/

div.g {
    width: 80%;
    margin: 100px auto;
    background-color: aliceblue;
    color: #000;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
}
div.g div {
    border: 1px solid aliceblue;
    text-align: center;
    padding: 10px;
}
div.g .it1 {
    background-color: rgb(245, 197, 135);
}
div.g .it2 {
    background-color: aquamarine;
}
div.g .it3 {
    background-color: aqua;
}
div.g .it4 {
    background-color: bisque;
}
div.g .it5 {
    background-color: blueviolet;
}
div.g .it6 {
    background-color: rgb(92, 68, 114);
}
div.g .it7 {
    background-color: rgb(157, 127, 185);
}